<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Create a bot for Microsoft Teams</title>
      <link href="archives/9f443a4b.html"/>
      <url>archives/9f443a4b.html</url>
      
        <content type="html"><![CDATA[<p>You’ll need to complete the following steps to create a conversational bot:<br><br>1: Prepare your development environment.<br><br>2: Create your web service.<br><br>3: Register your web service as a bot with Microsoft Bot Framework.<br><br>4: Create your app manifest and your app package.<br><br>5: Upload your package to Microsoft Teams.<br></p><h2 id="Prepare-your-development-environment"><a href="#Prepare-your-development-environment" class="headerlink" title="Prepare your development environment"></a>Prepare your development environment</h2><p>The first thing you’ll need to do is prepare your development environment. You’ll need to make sure custom app uploading is enabled for the Office 365 organization you want to build your app in. If you need a dedicated development tenant, you can sign up for the <a href="https://developer.microsoft.com/office/dev-program">Office 365 developer program</a>. For additional information see <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/prepare-your-o365-tenant">Setup your development environment</a>.</p><h2 id="Create-your-web-service"><a href="#Create-your-web-service" class="headerlink" title="Create your web service"></a>Create your web service</h2><p>The heart of your bot is your <strong>web service</strong>. It will define a single route, typically <em>/api/messages</em>, on which to receive all requests. To get started, you have a few options to choose from:</p><ul><li>Start with the Teams conversation bot sample in either <a href="https://github.com/microsoft/BotBuilder-Samples/tree/master/samples/csharp_dotnetcore/57.teams-conversation-bot">C#/dotnet Github Samples</a> or <a href="https://github.com/microsoft/BotBuilder-Samples/tree/master/samples/javascript_nodejs/57.teams-conversation-bot">JavaScript Github Samples</a>.</li><li>If you’re using JavaScript, use the <a href="https://github.com/OfficeDev/generator-teams">Yeoman Generator for Microsoft Teams</a> to scaffold your Teams app, including your web service. This is particularly helpful when building a Teams app that contains more than just a conversational bot.</li><li>Create your web service from scratch. You can choose to add the Bot Framework SDK for your language, or you can work directly with the JSON payloads.</li></ul><h2 id="Register-your-web-service-with-the-Bot-Framework"><a href="#Register-your-web-service-with-the-Bot-Framework" class="headerlink" title="Register your web service with the Bot Framework"></a>Register your web service with the Bot Framework</h2><p> Important</p><p>When registering your web service, be sure to set the <strong>Display name</strong> to the same name you used for your <strong>Short name</strong> in your app manifest. When your app is distributed by either direct uploading or through an organization’s app catalog, messages sent to a conversation by your bot will use the registration’s <strong>Display name</strong> rather than the app’s <strong>Short name</strong>.</p><p>Registering your web service with the Bot Framework provides a secure communication channel between the Teams client and your web service. The Teams client and your web service never communicate directly. Instead, messages are routed through the Bot Framework Service (Microsoft Teams uses a separate instance of this service that is compliant with Office 365 standards).</p><p>You have two options when registering your web service with the Bot Framework. You can use either <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/create-a-bot-for-teams#using-app-studio">App Studio</a> or the <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/create-a-bot-for-teams#in-the-legacy-portal">legacy portal</a> to register your bot without using an Azure subscription. Or, if you already have an Azure subscription (or don’t mind creating one), you can use the <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/create-a-bot-for-teams#with-an-azure-subscription">Azure portal</a> to register your web service.</p><h3 id="With-an-Azure-subscription"><a href="#With-an-Azure-subscription" class="headerlink" title="With an Azure subscription"></a>With an Azure subscription</h3><p>You can also register your web service by creating a Bot Channels Registration resource in the Azure portal.</p><ol><li>In the <a href="https://ms.portal.azure.com/#home">Azure portal</a>, under Azure services, select <strong>Create a resource</strong>.</li><li>In the search box enter “bot”. And in the drop-down list, select <strong>Bot Channels Registration</strong>.</li><li>Select the <strong>Create</strong> button.</li><li>In the Bot <strong>Channel Registration</strong> blade, provide the requested information about your bot.</li><li>Leave the <strong>Messaging endpoint</strong> box empty for now, you will enter the required URL after deploying the bot. The following picture shows an example of the registration settings:  </li></ol><img src="/archives/9f443a4b/auth-bot-channels-registration.png" class="">  <ol start="6"><li>Click <strong>Microsoft App ID</strong> and password and then <strong>Create New.</strong></li><li>Click <strong>Create App ID in the App Registration Portal</strong> link.</li><li>In the displayed <strong>App registration</strong> window, click the <strong>New registration</strong> tab in the upper left.</li><li>Enter the name of the bot application you are registering, we used <em>BotTeamsAuth</em> (you need to select your own unique name).</li><li>or the <strong>Supported account types</strong> select <em>Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox).</em></li><li>Click the <strong>Register</strong> button. Once completed, Azure displays the Overview page for the application.</li><li>Copy and save to a file the <strong>Application (client) ID</strong> value.</li><li>In the left panel, click <strong>Certificate and secrets</strong>.</li></ol><ul><li>Under Client secrets, click <strong>New client secret</strong>.</li><li>Add a description to identify this secret from others you might need to create for this app.</li><li>Set <em>Expires</em> to your selection.</li><li>Click <strong>Add</strong>.</li><li>Copy the client secret and save it to a file.</li></ul><ol start="14"><li>Go back to the <strong>Bot Channel Registration</strong> window and copy the App ID and the Client secret in the <strong>Microsoft App ID</strong> and <strong>Password</strong> boxes, respectively.</li><li>Click <strong>OK</strong>.</li><li>Finally, click <strong>Create</strong>.  </li></ol><p>After Azure has created the registration resource it will be included in the resource group list.  </p><img src="/archives/9f443a4b/auth-bot-channels-registration-group.png" class="">  <p>Once your bot channels registration is created, you’ll need to enable the Teams channel.</p><ol><li>In the Azure portal, under Azure services, select the <strong>Bot Channel Registration</strong> you just created.</li><li>In the left panel, click <strong>Channels</strong>.</li><li>Click the Microsoft Teams icon, then choose <strong>Save</strong>.  </li></ol><h2 id="Create-your-app-manifest-and-package"><a href="#Create-your-app-manifest-and-package" class="headerlink" title="Create your app manifest and package"></a>Create your app manifest and package</h2><p>Your app manifest defines the metadata for your app, the extension points your app is using, and pointers to the web services those extension points connect to. You can either use App Studio to help you create your app manifest, or create it manually.  </p><h3 id="Add-using-App-Studio"><a href="#Add-using-App-Studio" class="headerlink" title="Add using App Studio"></a>Add using App Studio</h3><ol><li>In the Teams client, open App Studio from the … overflow menu on the left navigation rail. If App Studio isn’t already installed, you can do so by searching for it.</li><li>On the <strong>Manifest editor</strong> tab select <strong>Create a new app</strong> (or if you’re adding a bot to an existing app, you can import your app package)</li><li>Add your app details (see <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/resources/schema/manifest-schema">manifest schema definition</a> for full descriptions of each field).</li><li>On the <strong>Bots</strong> tab select the <strong>Setup</strong> button.</li><li>You can either create a new web service registration (<strong>New bot</strong>), or if you’ve already registered one, select <strong>Existing bot</strong>.</li><li>Select the capabilities and scopes your bot will need.</li><li>If necessary, update your bot endpoint address to point to your bot. It should look something like <a href="https://someplace.com/api/messages">https://someplace.com/api/messages</a>.</li><li>Optionally, add <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/create-a-bot-commands-menu">bot commands</a>.</li><li>Optionally, you can download your completed app package from the <strong>Test and distribute</strong> tab.<h3 id="Create-it-manually"><a href="#Create-it-manually" class="headerlink" title="Create it manually"></a>Create it manually</h3>As with messaging extensions and tabs, you update the <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/resources/schema/manifest-schema">app-manifest</a> to define your bot. Add new top-level JSON structure in your app manifest with the <em>bots</em> property.<table><thead><tr><th>Name</th><th>Type</th><th>Maximum size</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><em>botId</em></td><td>String</td><td>64 characters</td><td>✔</td><td>The unique Microsoft app ID for the bot as registered with the Bot Framework. This may well be the same as the overall app ID.</td></tr><tr><td><em>needsChannelSelector</em></td><td>Boolean</td><td>64 characters</td><td></td><td>Describes whether or not the bot utilizes a user hint to add the bot to a specific channel. Default: false.</td></tr><tr><td><em>isNotificationOnly</em></td><td>Boolean</td><td>64 characters</td><td></td><td>Indicates whether a bot is a one-way, notification-only bot, as opposed to a conversational bot. Default: false.</td></tr><tr><td><em>supportsFiles</em></td><td>Boolean</td><td>64 characters</td><td></td><td>ndicates whether the bot supports the ability to upload/download files in personal chat. Default: false.</td></tr><tr><td><em>scopes</em></td><td>Array of enum</td><td>3</td><td>✔</td><td>Specifies whether the bot offers an experience in the context of a channel in a team, in a group chat (groupchat), or an experience scoped to an individual user alone (personal). These options are non-exclusive.</td></tr></tbody></table></li></ol><p>Optionally, you can define one or more lists of commands that your bot can recommend to users. The object is an array (maximum of 2 elements) with all elements of type <em>object</em>. You must define a separate command list for each scope that your bot supports. See <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/create-a-bot-commands-menu">Bot menus</a>, for more information.  </p><table><thead><tr><th>Name</th><th>Type</th><th>Maximum size</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><em>items.scopes</em></td><td>array of enum</td><td>3</td><td>✔</td><td>Specifies the scope for which the command list is valid. Options are team, personal, and groupchat.</td></tr><tr><td><em>items.commands</em></td><td>array of objects</td><td>10</td><td>✔</td><td>An array of commands the bot supports:title: the bot command name (string, 32) description: a simple description or example of the command syntax and its argument (string, 128)</td></tr></tbody></table><h3 id="Simple-manifest-example"><a href="#Simple-manifest-example" class="headerlink" title="Simple manifest example"></a>Simple manifest example</h3><p>The example below is a simple bot object, with two command lists defined. This is not the entire app manifest file, just the part specific to messaging extensions.  </p><pre class=" language-JSON"><code class="language-JSON">[  "bots": [    {      "botId": "%MICROSOFT-APP-ID-REGISTERED-WITH-BOT-FRAMEWORK%",      "needsChannelSelector": false,      "isNotificationOnly": false,      "scopes": [ "team", "personal", "groupchat" ],      "supportsFiles": true,      "commandLists": [        {          "scopes": [ "team", "groupchat" ],          "commands": [            {              "title": "Command 1",              "description": "Description of Command 1"            },            {              "title": "Command N",              "description": "Description of Command N"            }          ]        },        {          "scopes": [ "personal", "groupchat" ],          "commands": [            {              "title": "Personal command 1",              "description": "Description of Personal command 1"            },            {              "title": "Personal command N",              "description": "Description of Personal command N"            }          ]        }      ]    }]]</code></pre><h3 id="Create-your-app-package-manually"><a href="#Create-your-app-package-manually" class="headerlink" title="Create your app package manually"></a>Create your app package manually</h3><p>To create an app package, you need to add your app manifest and (optionally) your app icons to a .zip archive file. See <a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/apps-package">Create your app package</a> for complete details. Make sure your .zip archive contains only the necessary files, and has no additional folder structure inside of it.</p><h2 id="Upload-your-package-to-Microsoft-Teams"><a href="#Upload-your-package-to-Microsoft-Teams" class="headerlink" title="Upload your package to Microsoft Teams"></a>Upload your package to Microsoft Teams</h2><p> <strong>Note</strong><br>To successfully upload your bot, your tenant admin must first <a href="https://docs.microsoft.com/en-us/microsoftteams/manage-apps#manage-org-wide-app-settings">allow uploading</a> third-party or custom apps in Teams.<br>If you’ve been using App Studio, you can install your app from the <strong>Test and distribute</strong> tab of the <strong>Manifest editor</strong>. Alternatively, you can install your app package by clicking the … overflow menu from the left navigation rail, clicking <strong>More apps</strong>, then the <strong>Upload a custom app</strong> link. You can also import an app manifest or app package into App Studio to make additional updates before uploading..</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Teams </tag>
            
            <tag> Bot </tag>
            
            <tag> Chatbot </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="archives/4a17b156.html"/>
      <url>archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mingming&amp;Leilei&#39;s Home Go Live</title>
      <link href="archives/f64a00e2.html"/>
      <url>archives/f64a00e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mingming-amp-Leilei’s-Home-Go-Live-Now"><a href="#Mingming-amp-Leilei’s-Home-Go-Live-Now" class="headerlink" title="Mingming&amp;Leilei’s Home Go Live Now!"></a>Mingming&amp;Leilei’s Home Go Live Now!</h2><p>Hi everyone,<br>Welcome to Mingming&amp;Leilei’s Home.<br>I am Mingming, this is our Personal Blog.<br>We are going to share the best story and memory in our life.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
